syntax = "proto3";
import "Protos/shared.proto";

option csharp_namespace = "Server";

service Procedure {
	rpc addProcedure(ProcedureInfo) returns (ProcedureID);				// rpc for adding a completed procedure to the database
	rpc getProcedures(ClientID) returns (AllProcedures);				// rpc for getting procedures associated with a specific client by ID
	rpc getFormFields(FormName) returns (FormFields);					// rpc for getting the fillable fields in a PDF form specified by its name
	rpc deleteProcedure(ProcedureID) returns (ServiceStatus);			// rpc for deleting a procedure, given the ID
	rpc completeForm(CompleteFormInfo) returns (ServiceStatus);			// rpc for filling out a form and storing it in the database
	rpc updateProcedure(ProcedureInfo) returns (ServiceStatus);			// rpc for updating an existing procedure. This only updates the procedure name and notes. Forms/Images are handled separately.
	rpc searchProcedure(ProcedureName) returns (AllProcedures);			// rpc for searching a procedure by name.				
}

// record for representing a ClientID. This is used for getting all procedures associated with a specific client by ID.
message ClientID {
	int32 cID = 1;
}

// record for representing the procedure ID. This is used for making changes to specific procedures.
message ProcedureID {
	int32 pID = 1;
}

// record for representing the search term when searching for a procedure.
message ProcedureName {
	string pName = 1;
}

// record for representing a specific procedure.
message ProcedureInfo {
	optional int32 procedure_ID = 1;
	string procedure_name = 2;
	optional string procedure_datetime = 3;
	int32 client_ID = 4;
	int32 employee_ID = 5;
	optional string procedure_notes = 6;
}

// record for representing zero or more procedures. This is used for getting all procedures associated with a specific client.
message AllProcedures {
	repeated ProcedureInfo procedures = 1;
}

// record for representing the name of the form being filled out -- used to get the fields of
message FormName {
	string form_name = 1;
}

// record for representing a single field on a PDF form.
message Field {
	string field_name = 1;
	string field_type = 2;
	string field_value = 3;
}

// record for representing an arbitrary number of fields from a PDF form.
message FormFields {
	FormName fName = 1;
	repeated Field fields = 2;
}

// record for representing the complete information needed to complete a form and store it in the database.
message CompleteFormInfo {
	int32 procedure_ID = 1;
	FormFields form = 2;
}